{"ast":null,"code":"import supabase from '../utils/supabase';\n// Authentication service for Supabase\nexport const authService = {\n  // Sign up user\n  signUp: async (email, password, userDetails) => {\n    try {\n      // Register user in Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            role: userDetails.role,\n            name: userDetails.name || 'Default Name'\n          }\n        }\n      });\n      if (authError) throw authError;\n\n      // If registration is successful, add user details to the appropriate table\n      if (authData && authData.user) {\n        const userId = authData.user.id;\n        const userRole = userDetails.role;\n\n        // Determine which table to insert into based on user role\n        const tableName = userRole === 'startup' ? 'startups' : 'investors';\n\n        // Insert user details into the appropriate table\n        const {\n          error: profileError\n        } = await supabase.from(tableName).insert({\n          id: userId,\n          ...userDetails,\n          questId: `Q-${Math.floor(Math.random() * 10000)}`,\n          createdAt: new Date()\n        });\n        if (profileError) throw profileError;\n      }\n      return {\n        success: true,\n        data: authData\n      };\n    } catch (error) {\n      console.error('Sign up error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  // Sign in user\n  signIn: async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) throw error;\n\n      // If login successful, get user profile data\n      if (data && data.user) {\n        const userId = data.user.id;\n        const userRole = data.user.user_metadata.role;\n        const tableName = userRole === 'startup' ? 'startups' : 'investors';\n\n        // Get user profile data\n        const {\n          data: profileData,\n          error: profileError\n        } = await supabase.from(tableName).select('*').eq('id', userId).single();\n        if (profileError) throw profileError;\n        return {\n          success: true,\n          data: profileData\n        };\n      }\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  // Sign out user\n  signOut: async () => {\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Sign out error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  // Get current session\n  getSession: async () => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.getSession();\n      if (error) throw error;\n      return {\n        success: true,\n        data\n      };\n    } catch (error) {\n      console.error('Get session error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  // Get current user\n  getUser: async () => {\n    try {\n      const {\n        data: sessionData\n      } = await supabase.auth.getSession();\n      if (!sessionData.session) {\n        return {\n          success: false,\n          error: 'No active session'\n        };\n      }\n      const userId = sessionData.session.user.id;\n      const userRole = sessionData.session.user.user_metadata.role;\n      const tableName = userRole === 'startup' ? 'startups' : 'investors';\n\n      // Get user profile data\n      const {\n        data: profileData,\n        error: profileError\n      } = await supabase.from(tableName).select('*').eq('id', userId).single();\n      if (profileError) throw profileError;\n      return {\n        success: true,\n        data: profileData\n      };\n    } catch (error) {\n      console.error('Get user error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  },\n  // Password reset request\n  resetPassword: async email => {\n    try {\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) throw error;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  }\n};","map":{"version":3,"names":["supabase","authService","signUp","email","password","userDetails","data","authData","error","authError","auth","options","role","name","user","userId","id","userRole","tableName","profileError","from","insert","questId","Math","floor","random","createdAt","Date","success","console","signIn","signInWithPassword","user_metadata","profileData","select","eq","single","signOut","getSession","getUser","sessionData","session","resetPassword","resetPasswordForEmail"],"sources":["/Users/nitin/Desktop/nitin/Fundinvest/questomer/src/services/auth.service.ts"],"sourcesContent":["import supabase from '../utils/supabase';\nimport { StartupUser, InvestorUser, UserRole } from '../types';\n\n// Authentication service for Supabase\nexport const authService = {\n  // Sign up user\n  signUp: async (email: string, password: string, userDetails: Partial<StartupUser | InvestorUser>) => {\n    try {\n      // Register user in Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            role: userDetails.role,\n            name: userDetails.name || 'Default Name',\n          }\n        }\n      });\n\n      if (authError) throw authError;\n\n      // If registration is successful, add user details to the appropriate table\n      if (authData && authData.user) {\n        const userId = authData.user.id;\n        const userRole = userDetails.role as UserRole;\n        \n        // Determine which table to insert into based on user role\n        const tableName = userRole === 'startup' ? 'startups' : 'investors';\n        \n        // Insert user details into the appropriate table\n        const { error: profileError } = await supabase\n          .from(tableName)\n          .insert({\n            id: userId,\n            ...userDetails,\n            questId: `Q-${Math.floor(Math.random() * 10000)}`,\n            createdAt: new Date()\n          });\n\n        if (profileError) throw profileError;\n      }\n\n      return { success: true, data: authData };\n    } catch (error) {\n      console.error('Sign up error:', error);\n      return { success: false, error };\n    }\n  },\n\n  // Sign in user\n  signIn: async (email: string, password: string) => {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) throw error;\n\n      // If login successful, get user profile data\n      if (data && data.user) {\n        const userId = data.user.id;\n        const userRole = data.user.user_metadata.role as UserRole;\n        const tableName = userRole === 'startup' ? 'startups' : 'investors';\n\n        // Get user profile data\n        const { data: profileData, error: profileError } = await supabase\n          .from(tableName)\n          .select('*')\n          .eq('id', userId)\n          .single();\n\n        if (profileError) throw profileError;\n\n        return { success: true, data: profileData };\n      }\n\n      return { success: true, data };\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return { success: false, error };\n    }\n  },\n\n  // Sign out user\n  signOut: async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Sign out error:', error);\n      return { success: false, error };\n    }\n  },\n\n  // Get current session\n  getSession: async () => {\n    try {\n      const { data, error } = await supabase.auth.getSession();\n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      console.error('Get session error:', error);\n      return { success: false, error };\n    }\n  },\n\n  // Get current user\n  getUser: async () => {\n    try {\n      const { data: sessionData } = await supabase.auth.getSession();\n      \n      if (!sessionData.session) {\n        return { success: false, error: 'No active session' };\n      }\n      \n      const userId = sessionData.session.user.id;\n      const userRole = sessionData.session.user.user_metadata.role as UserRole;\n      const tableName = userRole === 'startup' ? 'startups' : 'investors';\n\n      // Get user profile data\n      const { data: profileData, error: profileError } = await supabase\n        .from(tableName)\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (profileError) throw profileError;\n\n      return { success: true, data: profileData };\n    } catch (error) {\n      console.error('Get user error:', error);\n      return { success: false, error };\n    }\n  },\n\n  // Password reset request\n  resetPassword: async (email: string) => {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) throw error;\n      return { success: true };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      return { success: false, error };\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}