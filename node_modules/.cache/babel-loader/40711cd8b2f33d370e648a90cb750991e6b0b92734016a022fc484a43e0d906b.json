{"ast":null,"code":"var _jsxFileName = \"/Users/nitin/Desktop/nitin/Fundinvest/questomer/src/context/AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/auth.service';\nimport { dataService } from '../services/data.service';\n\n// Mock data for development - in production this would come from API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(undefined);\n\n// Default dashboard stats\nconst defaultStats = {\n  totalMatches: 0,\n  profileViews: 0,\n  meetingsScheduled: 0,\n  activeDeals: 0,\n  fundingProgress: {\n    target: 0,\n    current: 0,\n    percentage: 0\n  },\n  investmentCommitments: 0,\n  openDeals: 0,\n  potentialInvestments: 0\n};\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check for existing session on initial load\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        setLoading(true);\n        const {\n          success,\n          data\n        } = await authService.getSession();\n        if (success && data && data.session) {\n          const userResult = await authService.getUser();\n          if (userResult.success && userResult.data) {\n            setUser(userResult.data);\n            setIsAuthenticated(true);\n          }\n        }\n      } catch (error) {\n        console.error('Session check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkSession();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        success,\n        data,\n        error\n      } = await authService.signIn(email, password);\n      if (success && data) {\n        setUser(data);\n        setIsAuthenticated(true);\n        return true;\n      }\n      console.error('Login error:', error);\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (email, password, userDetails) => {\n    try {\n      setLoading(true);\n      const {\n        success,\n        error\n      } = await authService.signUp(email, password, userDetails);\n      if (success) {\n        // On success, auto-login\n        return await login(email, password);\n      }\n      console.error('Registration error:', error);\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await authService.signOut();\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async updates => {\n    if (!user) return false;\n    try {\n      setLoading(true);\n      if (user.role === 'startup') {\n        const {\n          success,\n          data,\n          error\n        } = await dataService.updateStartupProfile(user.id, updates);\n        if (success && data) {\n          setUser(prev => ({\n            ...prev,\n            ...updates\n          }));\n          return true;\n        }\n        console.error('Profile update error:', error);\n        return false;\n      } else {\n        const {\n          success,\n          data,\n          error\n        } = await dataService.updateInvestorProfile(user.id, updates);\n        if (success && data) {\n          setUser(prev => ({\n            ...prev,\n            ...updates\n          }));\n          return true;\n        }\n        console.error('Profile update error:', error);\n        return false;\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get dashboard stats\n  const getDashboardStats = async () => {\n    if (!user) return null;\n    try {\n      setLoading(true);\n      if (user.role === 'startup') {\n        const {\n          success,\n          data,\n          error\n        } = await dataService.getStartupDashboardStats(user.id);\n        if (success && data) {\n          return data;\n        }\n        console.error('Get stats error:', error);\n        return null;\n      } else {\n        const {\n          success,\n          data,\n          error\n        } = await dataService.getInvestorDashboardStats(user.id);\n        if (success && data) {\n          return data;\n        }\n        console.error('Get stats error:', error);\n        return null;\n      }\n    } catch (error) {\n      console.error('Get stats error:', error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    getDashboardStats\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","dataService","jsxDEV","_jsxDEV","AppContext","undefined","defaultStats","totalMatches","profileViews","meetingsScheduled","activeDeals","fundingProgress","target","current","percentage","investmentCommitments","openDeals","potentialInvestments","AppProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkSession","success","data","getSession","session","userResult","getUser","error","console","login","email","password","signIn","register","userDetails","signUp","logout","signOut","updateProfile","updates","role","updateStartupProfile","id","prev","updateInvestorProfile","getDashboardStats","getStartupDashboardStats","getInvestorDashboardStats","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/nitin/Desktop/nitin/Fundinvest/questomer/src/context/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { StartupUser, InvestorUser, UserRole, DashboardStats } from '../types';\nimport { authService } from '../services/auth.service';\nimport { dataService } from '../services/data.service';\n\n// Mock data for development - in production this would come from API\nimport { mockStartups, mockInvestors } from '../utils/mockData';\n\ntype AuthUser = StartupUser | InvestorUser | null;\n\ninterface AppContextType {\n  user: StartupUser | InvestorUser | null;\n  loading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  register: (email: string, password: string, userDetails: Partial<StartupUser | InvestorUser>) => Promise<boolean>;\n  logout: () => Promise<void>;\n  updateProfile: (updates: Partial<StartupUser | InvestorUser>) => Promise<boolean>;\n  getDashboardStats: () => Promise<DashboardStats | null>;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\n// Default dashboard stats\nconst defaultStats: DashboardStats = {\n  totalMatches: 0,\n  profileViews: 0,\n  meetingsScheduled: 0,\n  activeDeals: 0,\n  fundingProgress: {\n    target: 0,\n    current: 0,\n    percentage: 0\n  },\n  investmentCommitments: 0,\n  openDeals: 0,\n  potentialInvestments: 0,\n};\n\nexport const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<StartupUser | InvestorUser | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n\n  // Check for existing session on initial load\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        setLoading(true);\n        const { success, data } = await authService.getSession();\n        \n        if (success && data && data.session) {\n          const userResult = await authService.getUser();\n          if (userResult.success && userResult.data) {\n            setUser(userResult.data);\n            setIsAuthenticated(true);\n          }\n        }\n      } catch (error) {\n        console.error('Session check error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkSession();\n  }, []);\n\n  // Login function\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const { success, data, error } = await authService.signIn(email, password);\n      \n      if (success && data) {\n        setUser(data);\n        setIsAuthenticated(true);\n        return true;\n      }\n      \n      console.error('Login error:', error);\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async (email: string, password: string, userDetails: Partial<StartupUser | InvestorUser>): Promise<boolean> => {\n    try {\n      setLoading(true);\n      const { success, error } = await authService.signUp(email, password, userDetails);\n      \n      if (success) {\n        // On success, auto-login\n        return await login(email, password);\n      }\n      \n      console.error('Registration error:', error);\n      return false;\n    } catch (error) {\n      console.error('Registration error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async (): Promise<void> => {\n    try {\n      setLoading(true);\n      await authService.signOut();\n      setUser(null);\n      setIsAuthenticated(false);\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async (updates: Partial<StartupUser | InvestorUser>): Promise<boolean> => {\n    if (!user) return false;\n    \n    try {\n      setLoading(true);\n      \n      if (user.role === 'startup') {\n        const { success, data, error } = await dataService.updateStartupProfile(user.id, updates as Partial<StartupUser>);\n        \n        if (success && data) {\n          setUser(prev => ({ ...prev, ...updates } as StartupUser | InvestorUser));\n          return true;\n        }\n        \n        console.error('Profile update error:', error);\n        return false;\n      } else {\n        const { success, data, error } = await dataService.updateInvestorProfile(user.id, updates as Partial<InvestorUser>);\n        \n        if (success && data) {\n          setUser(prev => ({ ...prev, ...updates } as StartupUser | InvestorUser));\n          return true;\n        }\n        \n        console.error('Profile update error:', error);\n        return false;\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get dashboard stats\n  const getDashboardStats = async (): Promise<DashboardStats | null> => {\n    if (!user) return null;\n    \n    try {\n      setLoading(true);\n      \n      if (user.role === 'startup') {\n        const { success, data, error } = await dataService.getStartupDashboardStats(user.id);\n        \n        if (success && data) {\n          return data;\n        }\n        \n        console.error('Get stats error:', error);\n        return null;\n      } else {\n        const { success, data, error } = await dataService.getInvestorDashboardStats(user.id);\n        \n        if (success && data) {\n          return data;\n        }\n        \n        console.error('Get stats error:', error);\n        return null;\n      }\n    } catch (error) {\n      console.error('Get stats error:', error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    getDashboardStats\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}